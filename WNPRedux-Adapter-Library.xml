<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WNPRedux-Adapter-Library</name>
    </assembly>
    <members>
        <member name="F:WNPReduxAdapterLibrary.WNPRedux.mediaInfo">
            <summary>
            Info about the currently playing media.
            </summary>
        </member>
        <member name="F:WNPReduxAdapterLibrary.WNPRedux.mediaEvents">
            <summary>
            Events to interact with currently playing media.
            </summary>
        </member>
        <member name="F:WNPReduxAdapterLibrary.WNPRedux.clients">
            <summary>
            Number of connected clients.
            </summary>
        </member>
        <member name="F:WNPReduxAdapterLibrary.WNPRedux.mediaInfoDictionary">
            <summary>
            Dictionary of all media info by all connected clients, keyed by the WebsocketID
            </summary>
        </member>
        <member name="M:WNPReduxAdapterLibrary.WNPRedux.Initialize(System.Int32,System.String,System.Action{WNPReduxAdapterLibrary.WNPRedux.LogType,System.String},System.Boolean)">
            <summary>
            Opens the WebSocket if it isn't already opened.
            <returns>No return type</returns>
            <example>
            <code>
            void Logger(WNPRedux.LogType type, string message) {
              Console.WriteLine($"{type}: {message}");
            }
            WNPRedux.Initialize(1234, "1.0.0", logger);
            </code>
            </example>
            </summary>
            <param name="port">WebSocket Port</param>
            <param name="version">Adapter Version (major.minor.patch)</param>
            <param name="logger">Custom logger</param>
            <param name="throttleLogs">Prevent the same log message being logged more than once per 30 seconds</param>
        </member>
        <member name="M:WNPReduxAdapterLibrary.WNPRedux.Close">
            <summary>
            Closes the WebSocket if it's opened.
            </summary>
        </member>
        <member name="M:WNPReduxAdapterLibrary.WNPRedux.MediaEvents.TogglePlaying">
            <summary>
            Toggles the playing state of the current media.
            </summary>
        </member>
        <member name="M:WNPReduxAdapterLibrary.WNPRedux.MediaEvents.Next">
            <summary>
            Skips to the next media/section if supported.
            </summary>
        </member>
        <member name="M:WNPReduxAdapterLibrary.WNPRedux.MediaEvents.Previous">
            <summary>
            Skips to the previous media/section if supported.
            </summary>
        </member>
        <member name="M:WNPReduxAdapterLibrary.WNPRedux.MediaEvents.SetPositionSeconds(System.Int32)">
            <summary>
            Sets the current medias playback progress in seconds
            </summary>
            <param name="seconds"></param>.
        </member>
        <member name="M:WNPReduxAdapterLibrary.WNPRedux.MediaEvents.RevertPositionSeconds(System.Int32)">
            <summary>
            Reverts the current medias playback progress by x seconds
            </summary>
            <param name="seconds"></param>.
        </member>
        <member name="M:WNPReduxAdapterLibrary.WNPRedux.MediaEvents.ForwardPositionSeconds(System.Int32)">
            <summary>
            Forwards the current medias playback progress by x seconds
            </summary>
            <param name="seconds"></param>.
        </member>
        <member name="M:WNPReduxAdapterLibrary.WNPRedux.MediaEvents.SetPositionPercent(System.Double)">
            <summary>
            Sets the current medias playback progress in percent.
            </summary>
            <param name="percent"></param>
        </member>
        <member name="M:WNPReduxAdapterLibrary.WNPRedux.MediaEvents.RevertPositionPercent(System.Double)">
            <summary>
            Reverts the current medias playback progress by x percent
            </summary>
            <param name="percent"></param>.
        </member>
        <member name="M:WNPReduxAdapterLibrary.WNPRedux.MediaEvents.ForwardPositionPercent(System.Double)">
            <summary>
            Forwards the current medias playback progress by x percent
            </summary>
            <param name="percent"></param>.
        </member>
        <member name="M:WNPReduxAdapterLibrary.WNPRedux.MediaEvents.SetVolume(System.Int32)">
            <summary>
            Sets the current medias volume level
            </summary>
            <param name="volume">Number from 0-100</param>
        </member>
        <member name="M:WNPReduxAdapterLibrary.WNPRedux.MediaEvents.ToggleRepeat">
            <summary>
            Toggles the current medias repeat state if supported.
            </summary>
        </member>
        <member name="M:WNPReduxAdapterLibrary.WNPRedux.MediaEvents.ToggleShuffle">
            <summary>
            Toggles the current medias shuffle state if supported.
            </summary>
        </member>
        <member name="M:WNPReduxAdapterLibrary.WNPRedux.MediaEvents.ToggleThumbsUp">
            <summary>
            Toggles thumbs up or similar on the current media if supported.
            </summary>
        </member>
        <member name="M:WNPReduxAdapterLibrary.WNPRedux.MediaEvents.ToggleThumbsDown">
            <summary>
            Toggles thumbs down or similar on the current media if supported.
            </summary>
        </member>
        <member name="M:WNPReduxAdapterLibrary.WNPRedux.MediaEvents.SetRating(System.Int32)">
            <summary>
            Sets the rating from 0-5 on websites that support it.
            Falls back to:
            0 = no rating
            1-2 = Thumbs Down
            3-5 = Thumbs Up
            </summary>
            <param name="rating">Number from 0-5</param>
        </member>
    </members>
</doc>
